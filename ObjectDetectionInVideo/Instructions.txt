
This project uses the YOLO (You Only Look Once) object detection model to process a video and detect objects in it. The script runs entirely on Google Colab, allowing you to upload a video file, process it, and download the output video with detected objects.

---

## Features
- Detects objects in a video using the YOLO model.
- Processes the video frame by frame and annotates detected objects with bounding boxes and class labels.
- Supports direct file upload and download within Google Colab.
- Automatically downloads YOLO model files (weights, config, and class names) if not already present.

---

## Requirements
To run this script, you need:
- A Google account (to use Google Colab).
- A video file for object detection.

---

## How to Use

### 1. Open Google Colab
1. Go to [Google Colab](https://colab.research.google.com/).
2. Create a new notebook.

### 2. Copy the Code
Copy the Python script provided in this repository into a Colab cell.

### 3. Run the Script
- Execute the code cell to initialize the script.

### 4. Upload Video File
- When prompted, upload your video file (e.g., `.mp4`).

### 5. Download Output Video
- After processing, the output video (`output.mp4`) will be available for download.

---

## Implementation Details

### 1. YOLO Model
The script uses the YOLOv3 model with pre-trained weights for object detection:
- **`yolov3.weights`**: Pre-trained weights for YOLOv3.
- **`yolov3.cfg`**: Configuration file for YOLOv3.
- **`coco.names`**: Class labels for the COCO dataset (80 object categories).

These files are automatically downloaded during script execution.

### 2. Video Processing
- OpenCV (`cv2`) is used to capture and process the video frame by frame.
- Object detection is performed on each frame, and the results are saved to an output video file (`output.mp4`).

### 3. Google Colab Integration
- The script uses Colab's file upload and download utilities for ease of use.

---

## File Structure
```
project
├── script.py          # Main Python script for object detection
├── yolov3.weights     # YOLO model weights (downloaded automatically)
├── yolov3.cfg         # YOLO configuration file (downloaded automatically)
├── coco.names         # Object class labels (downloaded automatically)
├── input_video.mp4    # Example video uploaded by the user
└── output.mp4         # Processed video with object detection
```

---

## Example

### Input Video:
- A video of a busy street with cars, people, and bicycles.

### Output Video:
- The same video with bounding boxes around detected objects (e.g., `person`, `car`, `bicycle`) and confidence scores.

---

## Dependencies
The script uses the following libraries:
- OpenCV
- NumPy
- Google Colab's `files` module

All dependencies are available in the Colab environment, so no additional installation is needed.

---

## Troubleshooting
1. **Video Not Uploading**: Ensure the video file is in a supported format (e.g., `.mp4`, `.avi`).
2. **YOLO Files Not Downloading**: Check your internet connection or download the files manually and upload them to Colab.
3. **Output Video Issues**: Ensure your input video is not corrupted and has a valid codec.

---

## License
This project is for educational purposes and uses pre-trained YOLOv3 models under their respective licenses.

---

## Acknowledgments
- YOLO by Joseph Redmon ([YOLO Homepage](https://pjreddie.com/darknet/yolo/))
- Google Colab for providing a free cloud environment.

